;;   -*- mode: lisp-data; -*-
(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[nil nil #24=(headline (:standard-properties [132 132 144 1032 1032 0 #2=(:title) nil nil t nil 146 1032 1 nil [org-element-deferred org-element--headline-deferred nil t] nil #3=(org-data (:standard-properties [1 1 1 15732 15732 0 nil org-data nil t nil 3 15732 nil nil nil nil nil] :path "/home/cafo/.config/emacs/config.org" :CATEGORY "config" :fragile-cache nil))] :pre-blank 0 :raw-value #1=[org-element-deferred org-element--headline-parse-title (t) t] :title #1# :level #1# :priority #1# :tags #1# :todo-keyword #1# :todo-type #1# :footnote-section-p #1# :archivedp #1# :commentedp #1#)) 0] [nil nil #43=(headline (:standard-properties [1058 1058 1069 4310 4310 0 #2# nil nil t nil 1071 4308 2 nil nil nil #7=(headline (:standard-properties [1032 1032 1042 4310 4310 0 #2# nil element t nil 1044 4308 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 9) t] :title #4=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #6=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil))] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #7# 0] [[nil nil #8=(headline (:standard-properties [4544 4544 4555 7728 7728 0 #2# nil element t nil 4557 7726 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] nil #48=(headline (:standard-properties [4555 4555 4563 5077 5077 0 #2# section element t nil 4565 5075 2 nil nil nil #8#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 7) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) -1] #45=(headline (:standard-properties [4310 4310 4325 4544 4544 0 #2# nil element t nil 4327 4542 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 14) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil :fragile-cache nil)) 0] [[nil nil #53=(headline (:standard-properties [5654 5654 5665 7201 7201 0 #9=(:title) nil nil t nil 5667 7199 2 nil nil nil #8#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 10) t] :title #11=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #13=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil :fragile-cache nil)) 0] [[nil nil #10=(headline (:standard-properties [7728 7728 7736 8550 8550 0 #2# nil element t nil 7738 8548 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 7) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #58=(headline (:standard-properties [8393 8393 8411 8550 8550 0 #9# nil element t nil 8413 8548 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 17) t] :title #11# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil)) 0] #56=(headline (:standard-properties [7736 7736 7749 8393 8393 0 #9# section element t nil 7751 8391 2 nil nil nil #10#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title #11# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil)) 0] #54=(headline (:standard-properties [7201 7201 7210 7728 7728 0 #2# nil element t nil 7212 7726 2 nil nil nil #8#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil :fragile-cache nil)) 1] #50=(headline (:standard-properties [5077 5077 5090 5654 5654 0 (:title) nil element t nil 5092 5652 2 nil nil nil #8#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title [org-element-deferred org-element-property-2 (:raw-value) nil] :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p [org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp [org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil :fragile-cache nil)) 0] [[[nil nil #62=(headline (:standard-properties [8556 8556 8568 8678 8678 0 #14=(:title) nil nil t nil 8570 8676 2 nil nil nil #18=(headline (:standard-properties [8550 8550 8556 10326 10326 0 #14# nil nil t nil 8558 10324 1 nil nil nil #3#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (2 4) t] :title #15=[org-element-deferred org-element-property-2 (:raw-value) nil] :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #16=[org-element-deferred org-element--headline-footnote-section-p nil nil] :archivedp #17=[org-element-deferred org-element--headline-archivedp nil nil] :commentedp nil :fragile-cache nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 11) t] :title #15# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #16# :archivedp #17# :commentedp nil :fragile-cache nil)) 0] [[nil nil #65=(headline (:standard-properties [9442 9442 9481 9679 9679 0 #2# nil element t nil 9483 9677 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 38) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] nil #66=(headline (:standard-properties [9679 9679 9695 9842 9842 0 #14# nil element t nil 9697 9840 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 15) t] :title #15# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #16# :archivedp #17# :commentedp nil)) -1] #64=(headline (:standard-properties [8678 8678 8691 9442 9442 0 #14# nil element t nil 8693 9440 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 12) t] :title #15# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #16# :archivedp #17# :commentedp nil :fragile-cache nil)) 1] [[nil nil #19=(headline (:standard-properties [10326 10326 10337 10846 10846 0 #2# nil element t nil 10339 10844 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #75=(headline (:standard-properties [10541 10541 10557 10735 10735 0 #9# nil element t nil 10559 10733 2 nil nil nil #19#] :pre-blank 1 :raw-value [org-element-deferred org-element--headline-raw-value (3 14) t] :title #11# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil)) 0] #73=(headline (:standard-properties [10337 10337 10344 10541 10541 0 #2# section element t nil 10346 10539 2 nil nil nil #19#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 6) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #71=(headline (:standard-properties [9842 9842 9852 10326 10326 0 #9# nil element t nil 9854 10324 2 nil nil nil #18#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 9) t] :title #11# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil :fragile-cache nil)) -1] #18# 0] [[[[nil nil #78=(headline (:standard-properties [10846 10846 10857 10935 10935 0 #2# nil element t nil 10859 10933 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 10) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] nil #20=(headline (:standard-properties [10935 10935 10942 14510 14510 0 #9# nil element t nil 10944 14508 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 6) t] :title #11# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil :fragile-cache nil)) -1] [[nil nil #21=(headline (:standard-properties [11087 11087 11101 14386 14386 0 #9# nil nil t nil 11103 14384 2 nil nil nil #20#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 13) t] :title #11# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil :fragile-cache nil)) 0] nil #83=(headline (:standard-properties [11101 11101 11109 11802 11802 0 #9# nil nil t nil 11111 11800 3 nil nil nil #21#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 7) t] :title #11# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil :fragile-cache nil)) -1] #81=(headline (:standard-properties [10942 10942 10954 11087 11087 0 #9# section element t nil 10956 11085 2 nil nil nil #20#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 11) t] :title #11# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil)) 0] [[[nil nil #86=(headline (:standard-properties [12889 12889 12898 13444 13444 0 #2# nil element t nil 12900 13442 3 nil nil nil #21#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 8) t] :title #4# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] [nil nil #90=(headline (:standard-properties [13832 13832 13844 14386 14386 0 #2# nil element t nil 13846 14384 3 nil nil nil #21#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 11) t] :title #4# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 0] #89=(headline (:standard-properties [13444 13444 13458 13832 13832 0 #2# nil nil t nil 13460 13830 3 nil nil nil #21#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 13) t] :title #4# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil :fragile-cache nil)) 0] [[nil nil #94=(headline (:standard-properties [14510 14510 14533 14973 14973 0 #9# nil element t nil 14535 14971 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 22) t] :title #11# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil)) 0] [nil [nil nil #97=(headline (:standard-properties [15151 15151 15167 15732 15732 0 #2# nil element t nil 15169 15730 2 nil nil nil #22=(headline (:standard-properties [14973 14973 14980 15732 15732 0 #2# nil element t nil 14982 15730 1 nil nil nil #3#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (2 6) t] :title #4# :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil :fragile-cache nil))] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 15) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil :fragile-cache nil)) 0] #95=(headline (:standard-properties [14980 14980 14989 15151 15151 0 #2# section element t nil 14991 15149 2 nil nil nil #22#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 8) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] #22# 1] #92=(headline (:standard-properties [14386 14386 14400 14510 14510 0 #2# nil element t nil 14402 14508 2 nil nil nil #20#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 13) t] :title #4# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #5# :archivedp #6# :commentedp nil)) 1] #85=(headline (:standard-properties [11802 11802 11812 12889 12889 0 #9# nil element t nil 11814 12887 3 nil nil nil #21#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (4 9) t] :title #11# :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil :fragile-cache nil)) 1] #76=(headline (:standard-properties [10735 10735 10754 10846 10846 0 #9# nil element t nil 10756 10844 2 nil nil nil #19#] :pre-blank 0 :raw-value [org-element-deferred org-element--headline-raw-value (3 18) t] :title #11# :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :footnote-section-p #12# :archivedp #13# :commentedp nil :fragile-cache nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[nil nil #3# 0] [nil nil (keyword (:standard-properties [1 1 nil nil 27 0 nil top-comment element t nil nil nil nil nil nil nil #23=(section (:standard-properties [1 1 1 132 132 0 nil first-section element t nil 1 132 nil nil nil nil #3#] :fragile-cache nil))] :key "TITLE" :value "GNU Emacs Config")) 0] #23# 0] [[nil nil (keyword (:standard-properties [51 51 nil nil 88 0 nil nil element t nil nil nil nil nil nil nil #23#] :key "DESCRIPTION" :value "Personal emacs config")) 0] [nil nil (keyword (:standard-properties [114 114 nil nil 132 1 nil nil element t nil nil nil nil nil nil nil #23#] :key "OPTIONS" :value "toc:2")) 0] (keyword (:standard-properties [88 88 nil nil 114 0 nil nil element t nil nil nil nil nil nil nil #23#] :key "STARTUP" :value "showeverything")) 0] (keyword (:standard-properties [27 27 nil nil 51 0 nil nil element t nil nil nil nil nil nil nil #23#] :key "AUTHOR" :value "biscuitrescue")) 0] [[nil nil #26=(section (:standard-properties [144 144 144 1032 1032 0 nil section element t nil 144 1032 nil nil nil nil #24#])) 0] [nil nil #28=(item (:standard-properties [144 144 146 192 192 0 #29=(:tag) item element t nil nil nil nil nil nil #25=((144 0 "- " nil nil nil 192) (168 2 "- " nil nil nil 192) (192 0 "- " nil nil nil 226) (226 0 "- " nil nil nil 350) (252 2 "- " nil nil nil 272) (272 2 "- " nil nil nil 302) (302 2 "- " nil nil nil 328) (328 2 "- " nil nil nil 350) (350 0 "- " nil nil nil 439) (370 2 "- " nil nil nil 400) (400 2 "- " nil nil nil 439) (439 0 "- " nil nil nil 649) (453 2 "- " nil nil nil 481) (481 2 "- " nil nil nil 511) (511 2 "- " nil nil nil 591) (591 2 "- " nil nil nil 627) (627 2 "- " nil nil nil 649) (649 0 "- " nil nil nil 769) (675 2 "- " nil nil nil 693) (693 2 "- " nil nil nil 727) (727 2 "- " nil nil nil 769) (769 0 "- " nil nil nil 795) (795 0 "- " nil nil nil 905) (813 2 "- " nil nil nil 841) (841 2 "- " nil nil nil 873) (873 2 "- " nil nil nil 905) (905 0 "- " nil nil nil 955) (955 0 "- " nil nil nil 1031) (973 2 "- " nil nil nil 995) (995 2 "- " nil nil nil 1031)) #27=(plain-list (:standard-properties [144 144 144 1031 1032 1 nil planning element t nil nil nil nil nil nil #25# #26#] :type unordered))] :bullet #30="- " :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #27# 0] #24# -1] [[[[nil nil (plain-list (:standard-properties [168 168 168 192 192 0 nil nil element t nil nil nil nil nil nil #25# #28#] :type unordered)) 0] [nil nil #31=(item (:standard-properties [226 226 228 350 350 0 #29# item element t nil nil nil nil nil nil #25# #27#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [192 192 194 226 226 0 #29# item element t nil nil nil nil nil nil #25# #27#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil #32=(plain-list (:standard-properties [252 252 252 350 350 0 nil nil element t nil nil nil nil nil nil #25# #31#] :type unordered)) 0] [nil nil (item (:standard-properties [272 272 276 302 302 0 #29# item element t nil nil nil nil nil nil #25# #32#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [252 252 256 272 272 0 #29# item element t nil nil nil nil nil nil #25# #32#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [228 228 228 252 252 0 nil nil element t nil nil nil nil nil nil nil #31#])) 0] [[[nil nil (item (:standard-properties [328 328 332 350 350 0 #29# item element t nil nil nil nil nil nil #25# #32#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (paragraph (:standard-properties [352 352 352 370 370 0 nil nil element t nil nil nil nil nil nil nil #33=(item (:standard-properties [350 350 352 439 439 0 #29# item element t nil nil nil nil nil nil #25# #27#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] #33# 0] [[nil nil (item (:standard-properties [370 370 374 400 400 0 #29# item element t nil nil nil nil nil nil #25# #34=(plain-list (:standard-properties [370 370 370 439 439 0 nil nil element t nil nil nil nil nil nil #25# #33#] :type unordered))] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #35=(item (:standard-properties [439 439 441 649 649 0 #29# item element t nil nil nil nil nil nil #25# #27#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [400 400 404 439 439 0 #29# item element t nil nil nil nil nil nil #25# #34#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] #34# 0] (item (:standard-properties [302 302 306 328 328 0 #29# item element t nil nil nil nil nil nil #25# #32#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [146 146 146 168 168 0 nil nil element t nil nil nil nil nil nil nil #28#])) 0] [[[[[[nil nil #36=(plain-list (:standard-properties [453 453 453 649 649 0 nil nil element t nil nil nil nil nil nil #25# #35#] :type unordered)) 0] [nil nil (item (:standard-properties [481 481 485 511 511 0 #29# item element t nil nil nil nil nil nil #25# #36#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [453 453 457 481 481 0 #29# item element t nil nil nil nil nil nil #25# #36#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil (item (:standard-properties [591 591 595 627 627 0 #29# item element t nil nil nil nil nil nil #25# #36#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #37=(item (:standard-properties [649 649 651 769 769 0 #29# item element t nil nil nil nil nil nil #25# #27#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [627 627 631 649 649 0 #29# item element t nil nil nil nil nil nil #25# #36#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [511 511 515 591 591 0 #29# item element t nil nil nil nil nil nil #25# #36#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[nil nil #38=(plain-list (:standard-properties [675 675 675 769 769 0 nil nil element t nil nil nil nil nil nil #25# #37#] :type unordered)) 0] [nil nil (item (:standard-properties [693 693 697 727 727 0 #29# item element t nil nil nil nil nil nil #25# #38#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [675 675 679 693 693 0 #29# item element t nil nil nil nil nil nil #25# #38#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[nil nil (item (:standard-properties [769 769 771 795 795 0 #29# item element t nil nil nil nil nil nil #25# #27#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (paragraph (:standard-properties [797 797 797 813 813 0 nil nil element t nil nil nil nil nil nil nil #39=(item (:standard-properties [795 795 797 905 905 0 #29# item element t nil nil nil nil nil nil #25# #27#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil))])) 0] #39# 0] (item (:standard-properties [727 727 731 769 769 0 #29# item element t nil nil nil nil nil nil #25# #38#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (paragraph (:standard-properties [651 651 651 675 675 0 nil nil element t nil nil nil nil nil nil nil #37#])) 0] [[[nil nil (item (:standard-properties [813 813 817 841 841 0 #29# item element t nil nil nil nil nil nil #25# #40=(plain-list (:standard-properties [813 813 813 905 905 0 nil nil element t nil nil nil nil nil nil #25# #39#] :type unordered))] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil (item (:standard-properties [873 873 877 905 905 0 #29# item element t nil nil nil nil nil nil #25# #40#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [841 841 845 873 873 0 #29# item element t nil nil nil nil nil nil #25# #40#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [[[nil nil #41=(item (:standard-properties [955 955 957 1031 1031 0 #29# item element t nil nil nil nil nil nil #25# #27#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] [nil nil #42=(plain-list (:standard-properties [973 973 973 1031 1031 0 nil nil element t nil nil nil nil nil nil #25# #41#] :type unordered)) 0] (paragraph (:standard-properties [957 957 957 973 973 0 nil nil element t nil nil nil nil nil nil nil #41#])) 0] [nil [nil nil #7# 0] (item (:standard-properties [995 995 999 1031 1031 0 #29# item element t nil nil nil nil nil nil #25# #42#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 1] (item (:standard-properties [973 973 977 995 995 0 #29# item element t nil nil nil nil nil nil #25# #42#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 0] (item (:standard-properties [905 905 907 955 955 0 #29# item element t nil nil nil nil nil nil #25# #27#] :bullet #30# :checkbox nil :counter nil :pre-blank 0 :tag nil)) 1] #40# 0] [[[nil [nil nil #43# 0] (paragraph (:standard-properties [1042 1042 1042 1057 1058 1 nil planning element t nil nil nil nil nil nil nil #52=(section (:standard-properties [1042 1042 1042 1058 1058 0 nil section element t nil 1042 1058 nil nil nil nil #7#]))])) 1] [nil nil (src-block (:standard-properties [1069 1069 nil nil 4310 1 nil planning element t nil nil nil nil nil nil nil #44=(section (:standard-properties [1069 1069 1069 4310 4310 0 nil section element t nil 1069 4310 nil nil nil nil #43#]))] :language #47="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defvar elpaca-installer-version 0.11)\12  (defvar elpaca-directory (expand-file-name \"elpaca/\" user-emacs-directory))\12  (defvar elpaca-builds-directory (expand-file-name \"builds/\" elpaca-directory))\12  (defvar elpaca-repos-directory (expand-file-name \"repos/\" elpaca-directory))\12  (defvar elpaca-order '(elpaca :repo \"https://github.com/progfolio/elpaca.git\"\12  \11\11\11      :ref nil :depth 1 :inherit ignore\12  \11\11\11      :files (:defaults \"elpaca-test.el\" (:exclude \"extensions\"))\12  \11\11\11      :build (:not elpaca--activate-package)))\12  (let* ((repo  (expand-file-name \"elpaca/\" elpaca-repos-directory))\12         (build (expand-file-name \"elpaca/\" elpaca-builds-directory))\12         (order (cdr elpaca-order))\12         (default-directory repo))\12    (add-to-list 'load-path (if (file-exists-p build) build repo))\12    (unless (file-exists-p repo)\12      (make-directory repo t)\12      (when (<= emacs-major-version 28) (require 'subr-x))\12      (condition-case-unless-debug err\12          (if-let* ((buffer (pop-to-buffer-same-window \"*elpaca-bootstrap*\"))\12                    ((zerop (apply #'call-process `(\"git\" nil ,buffer t \"clone\"\12                                                    ,@(when-let* ((depth (plist-get order :depth)))\12                                                        (list (format \"--depth=%d\" depth) \"--no-single-branch\"))\12                                                    ,(plist-get order :repo) ,repo))))\12                    ((zerop (call-process \"git\" nil buffer t \"checkout\"\12                                          (or (plist-get order :ref) \"--\"))))\12                    (emacs (concat invocation-directory invocation-name))\12                    ((zerop (call-process emacs nil buffer nil \"-Q\" \"-L\" \".\" \"--batch\"\12                                          \"--eval\" \"(byte-recompile-directory \\\".\\\" 0 'force)\")))\12                    ((require 'elpaca))\12                    ((elpaca-generate-autoloads \"elpaca\" repo)))\12              (progn (message \"%s\" (buffer-string)) (kill-buffer buffer))\12            (error \"%s\" (with-current-buffer buffer (buffer-string))))\12        ((error) (warn \"%s\" err) (delete-directory repo 'recursive))))\12    (unless (require 'elpaca-autoloads nil t)\12      (require 'elpaca)\12      (elpaca-generate-autoloads \"elpaca\" repo)\12      (let ((load-source-file-function nil)) (load \"./elpaca-autoloads\"))))\12  (add-hook 'after-init-hook #'elpaca-process-queues)\12  (elpaca `(,@elpaca-order))\12\12  ;; Install a package via the elpaca macro\12  ;; See the \"recipes\" section of the manual for more details.\12\12  ;; (elpaca example-package)\12\12  ;; Install a package via the elpaca macro\12  ;; See the \"recipes\" section of the manual for more details.\12\12  ;; (elpaca example-package)\12\12  ;; Install use-package support\12  (elpaca elpaca-use-package\12    ;; Enable use-package :ensure support for Elpaca.\12    (elpaca-use-package-mode))\12\12  ;;When installing a package used in the init file itself,\12  ;;e.g. a package which adds a use-package key word,\12  ;;use the :wait recipe keyword to block until that package is installed/configured.\12  ;;For example:\12  ;;(use-package general :ensure (:wait t) :demand t)\12\12  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))\12\12")) 0] #44# -1] [[[[nil nil #46=(section (:standard-properties [4325 4325 4325 4544 4544 0 nil section element t nil 4325 4544 nil nil nil nil #45#])) 0] [nil nil #8# 0] (src-block (:standard-properties [4325 4325 nil nil 4544 1 nil planning element t nil nil nil nil nil nil nil #46#] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (require 'no-littering)\12  ;; (let ((dir (no-littering-expand-var-file-name \"lock-files/\")))\12  ;;   (make-directory dir t)\12  ;;   (setq lock-file-name-transforms `((\".*\" ,dir t))))\12")) 0] [nil [nil nil (src-block (:standard-properties [4563 4563 nil nil 5077 1 nil planning element t nil nil nil nil nil nil nil #49=(section (:standard-properties [4563 4563 4563 5077 5077 0 nil section element t nil 4563 5077 nil nil nil nil #48#]))] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package evil\12    :ensure t\12    :init\12    (setq evil-want-integration t\12          evil-want-keybinding nil\12          evil-vsplit-window-right t\12          evil-split-window-below t)\12    :config\12    (evil-set-undo-system 'undo-redo)\12    (evil-mode 1))\12\12  (use-package evil-collection\12    :ensure t\12    :after evil\12    :config\12    (setq evil-collection-mode-list '(dashboard dired ibuffer))\12    (evil-collection-init))\12\12  (use-package evil-tutor\12    :ensure t\12    :after evil)\12")) 0] #49# 1] #48# 0] [[nil nil #51=(section (:standard-properties [5090 5090 5090 5654 5654 0 nil section element t nil 5090 5654 nil nil nil nil #50#])) 0] nil (src-block (:standard-properties [5090 5090 nil nil 5654 1 nil planning element t nil nil nil nil nil nil nil #51#] :language "emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package which-key\12    :ensure t\12    :config\12    (which-key-mode 1)\12    (setq which-key-side-window-location 'bottom\12          which-key-side-window-max-height 0.25\12          which-key-idle-delay 0.5\12          which-key-idle-secondary-delay 0.05\12          which-key-max-description-length 30\12          which-key-add-column-padding 1\12          which-key-sort-order #'which-key-key-order-alpha\12          which-key-sort-uppercase-first nil\12          which-key-separator \" → \"\12          which-key-allow-imprecise-window-fit t))\12")) -1] #50# -1] #45# 1] #52# 0] (paragraph (:standard-properties [441 441 441 453 453 0 nil nil element t nil nil nil nil nil nil nil #35#])) 1] [[[[[nil nil #55=(section (:standard-properties [5665 5665 5665 7201 7201 0 nil section element t nil 5665 7201 nil nil nil nil #53#] :fragile-cache nil)) 0] [nil nil #54# 0] (src-block (:standard-properties [5665 5665 nil nil 7201 1 nil planning element t nil nil nil nil nil nil nil #55#] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package general\12    :ensure t\12    :config\12    (general-evil-setup)\12    (general-create-definer cafo/leader-keys\12      :states '(normal insert visual emacs)\12      :keymaps 'override\12      :prefix \"SPC\"\12      :global-prefix \"M-SPC\")\12\12    ;; Files\12    (cafo/leader-keys\12      \".\" '(find-file :wk \"Find file\")\12      \"SPC\" '(projectile-find-file :wk \"Find file in proj\")\12      \"f\" '(:ignore t :wk \"Files\")\12      \"f s\" '(save-buffer :wk \"Save buff\")\12      \"f c\" '((lambda () (interactive) (find-file \"~/.config/emacs/config.org\")) :wk \"Edit emacs config\")\12      \"w\" '(evil-window-map :wk \"Window\"))\12\12    ;; Code\12    (cafo/leader-keys\12      \"h\" '(:ignore t :wk \"Help\")\12      \"h f\" '(describe-function :wk \"Describe function\")\12      \"h v\" '(describe-variable :wk \"Describe variable\")\12      \"h r r\" '((lambda () (interactive) (load-file \"~/.config/emacs/init.el\")) :wk \"Reload emacs config\")\12      \"TAB TAB\" '(comment-line :wk \"Comment Lines\"))\12\12    (cafo/leader-keys\12      \"o\" '(:ignore t :wk \"Open\")\12      \"o t\" '(vterm-toggle :wk \"Toggle Vterm\")\12      \"o T\" '(vterm-toggle :wk \"Toggle Vterm\")\12      \"o p\" '(dired :wk \"Open dired\"))\12\12    ;; Buffers\12    (cafo/leader-keys\12      \"b\" '(:ignore t :wk \"buffer\")\12      \"b b\" '(switch-to-buffer :wk \"Switch Buffer\")\12      \"b i\" '(ibuffer :wk \"IBuffer\")\12      \"b c\" '(kill-this-buffer :wk \"Kill this Buffer\")\12      \"b n\" '(next-buffer :wk \"Next Buffer\")\12      \"b p\" '(previous-buffer :wk \"Prev Buffer\")\12      \"b r\" '(revert-buffer :wk \"Reload Buffer\"))\12    )\12\12")) 0] [[nil [nil nil #10# 0] (src-block (:standard-properties [7210 7210 nil nil 7728 2 nil planning element t nil nil nil nil nil nil nil #57=(section (:standard-properties [7210 7210 7210 7728 7728 0 nil section element t nil 7210 7728 nil nil nil nil #54#] :fragile-cache nil))] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package hydra\12    :ensure t\12    :config\12    ;; Window resize hydra\12    (defhydra hydra-window-resize (:hint nil)\12      \"\12  Resize window:\12  _h_: ←  _l_: →  _j_: ↓  _k_: ↑\12  _q_: quit\12  \"\12      (\"h\" enlarge-window-horizontally)\12      (\"l\" shrink-window-horizontally)\12      (\"j\" shrink-window)\12      (\"k\" enlarge-window)\12      (\"q\" nil \"quit\"))\12\12    ;; Bind hydra to leader key: SPC w r\12    (cafo/leader-keys\12      \"w r\" '(hydra-window-resize/body :which-key \"Resize Window\")))\12")) 1] [nil nil #60=(section (:standard-properties [7749 7749 7749 8393 8393 0 nil section element t nil 7749 8393 nil nil nil nil #56#])) 0] #56# -1] #57# 1] [[nil nil #58# 0] [[nil nil (src-block (:standard-properties [8411 8411 nil nil 8550 1 nil planning element t nil nil nil nil nil nil nil #59=(section (:standard-properties [8411 8411 8411 8550 8550 0 nil section element t nil 8411 8550 nil nil nil nil #58#]))] :language #61="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (global-set-key (kbd \"C-=\") 'text-scale-increase)\12  (global-set-key (kbd \"C--\") 'text-scale-decrease)\12\12")) 0] nil #18# -1] #59# 1] (src-block (:standard-properties [7749 7749 nil nil 8393 1 nil planning element t nil nil nil nil nil nil nil #60#] :language #61# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (set-face-attribute 'default nil\12     \11\11    :font \"Zed Mono\"\12     \11\11    :height 150\12     \11\11    :weight 'medium)\12  (set-face-attribute 'variable-pitch nil\12     \11\11    :font \"Zed Mono\"\12     \11\11    :height 150\12     \11\11    :weight 'medium)\12  (set-face-attribute 'fixed-pitch nil\12     \11\11    :font \"Zed Mono\"\12     \11\11    :height 150;\12     \11\11    :weight 'medium)\12  (set-face-attribute 'font-lock-comment-face nil\12     \11\11    :slant 'italic)\12  (set-face-attribute 'font-lock-keyword-face nil\12     \11\11    :slant 'italic)\12\12  ;; (add-to-list 'default-frame-alist '(font . \"Fira Code-13))\12  (setq-default line-spacing 0.12)\12\12")) -1] [[[[nil nil #63=(section (:standard-properties [8568 8568 8568 8678 8678 0 nil section element t nil 8568 8678 nil nil nil nil #62#])) 0] nil (src-block (:standard-properties [8568 8568 nil nil 8678 0 nil planning element t nil nil nil nil nil nil nil #63#] :language #67="emacs-lisp" :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-modeline\12    :ensure t\12    :init (doom-modeline-mode 1))\12")) -1] [nil nil #70=(section (:standard-properties [8691 8691 8691 9442 9442 0 nil section element t nil 8691 9442 nil nil nil nil #64#])) 0] #64# -1] [[[nil nil #65# 0] nil #69=(section (:standard-properties [9481 9481 9481 9679 9679 0 nil section element t nil 9481 9679 nil nil nil nil #65#] :fragile-cache nil)) -1] [[nil nil #66# 0] [nil nil (src-block (:standard-properties [9695 9695 nil nil 9842 0 nil planning element t nil nil nil nil nil nil nil #68=(section (:standard-properties [9695 9695 9695 9842 9842 0 nil section element t nil 9695 9842 nil nil nil nil #66#]))] :language #67# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq display-line-numbers-type 'relative)\12  (global-display-line-numbers-mode 1)\12  (global-visual-line-mode t)\12")) 0] #68# 0] (src-block (:standard-properties [9481 9481 nil nil 9679 1 nil planning element t nil nil nil nil nil nil nil #69#] :language #67# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (menu-bar-mode -1)\12  (tool-bar-mode -1)\12  (scroll-bar-mode -1)\12  (setq use-dialog-box nil)\12  ;; Use short y/n instead of full yes/no\12  (setq use-short-answers t)\12")) 0] (src-block (:standard-properties [8691 8691 nil nil 9442 1 nil planning element t nil nil nil nil nil nil nil #70#] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package dashboard\12    :ensure t\12    :init\12    (setq initial-buffer-choice 'dashboard-open)\12    (setq dashboard-set-heading-icons t)\12    (setq dashboard-set-file-icons t)\12    (setq dashboard-startup-banner 'logo)\12    ;; (setq dashboard-center-content t)\12    ;; (setq dashboard-vertically-center-content t)\12    (setq dashboard-show-shortcuts nil)\12    ;; (setq dashboard-items '((recents   . 5)\12    ;;                         (bookmarks . 3)\12    ;;                         (projects  . 3)\12    ;;                         (agenda    . 5)\12    ;;                         (registers . 3)))\12\12    (dashboard-setup-startup-hook))\12    ;; (add-hook 'dashboard-setup-startup-hook (lambda () (display-line-numbers-mode -1)))\12")) 0] #62# -1] #53# -1] [[[[[[nil nil #72=(section (:standard-properties [9852 9852 9852 10326 10326 0 nil section element t nil 9852 10326 nil nil nil nil #71#] :fragile-cache nil)) 0] [nil nil #19# 0] (src-block (:standard-properties [9852 9852 nil nil 10326 1 nil planning element t nil nil nil nil nil nil nil #72#] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-themes\12    :ensure t\12    :custom\12    (doom-themes-enable-bold t)   ; if nil, bold is universally disabled\12    (doom-themes-enable-italic t) ; if nil, italics is universally disabled\12    :config\12    (load-theme 'latte t)\12    (doom-themes-visual-bell-config)\12    (doom-themes-neotree-config)\12    (doom-themes-treemacs-config)\12    (doom-themes-org-config))\12  (add-to-list 'custom-theme-load-path \"~/.config/emacs/themes/\")\12")) 0] [nil [nil nil (paragraph (:standard-properties [10344 10344 10344 10362 10363 1 nil planning element t nil nil nil nil nil nil nil #74=(section (:standard-properties [10344 10344 10344 10541 10541 0 nil section element t nil 10344 10541 nil nil nil nil #73#]))])) 0] #74# 1] #73# 0] [nil [nil nil #80=(section (:standard-properties [10557 10557 10557 10735 10735 0 nil section element t nil 10557 10735 nil nil nil nil #75#])) 0] #75# 1] (src-block (:standard-properties [10363 10363 nil nil 10541 1 nil nil element t nil nil nil nil nil nil nil #74#] :language #61# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package toc-org\12    :ensure t\12    :commands toc-org-enable\12    :init (add-hook 'org-mode-hook 'toc-org-enable))\12\12  (require 'org-tempo)\12\12")) -1] [[[nil nil #76# 0] [nil nil (src-block (:standard-properties [10754 10754 nil nil 10846 1 nil planning element t nil nil nil nil nil nil nil #77=(section (:standard-properties [10754 10754 10754 10846 10846 0 nil section element t nil 10754 10846 nil nil nil nil #76#] :fragile-cache nil))] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq electric-indent -1)\12  (setq electric-pair-mode 1)\12")) 0] #77# 0] [nil [nil nil (src-block (:standard-properties [10857 10857 nil nil 10935 1 nil planning element t nil nil nil nil nil nil nil #79=(section (:standard-properties [10857 10857 10857 10935 10935 0 nil section element t nil 10857 10935 nil nil nil nil #78#]))] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package diminish\12      :ensure t)\12\12")) 0] #79# 1] #78# 0] (src-block (:standard-properties [10557 10557 nil nil 10735 1 nil planning element t nil nil nil nil nil nil nil #80#] :language #61# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'org-mode-hook 'org-indent-mode)\12  (use-package org-bullets :ensure t)\12  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))\12")) -1] [[[[nil nil #81# 0] [[nil nil (src-block (:standard-properties [10954 10954 nil nil 11087 1 nil planning element t nil nil nil nil nil nil nil #82=(section (:standard-properties [10954 10954 10954 11087 11087 0 nil section element t nil 10954 11087 nil nil nil nil #81#]))] :language #61# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package flycheck\12    :ensure t\12    :defer t\12    :diminish\12    :init (global-flycheck-mode))\12")) 0] nil #21# -1] #82# 1] [[nil nil #84=(section (:standard-properties [11109 11109 11109 11802 11802 0 nil section element t nil 11109 11802 nil nil nil nil #83#] :fragile-cache nil)) 0] nil (src-block (:standard-properties [11109 11109 nil nil 11802 1 nil planning element t nil nil nil nil nil nil nil #84#] :language #61# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package lsp-mode\12    :ensure t\12    :commands (lsp lsp-deferred)\12    :init\12    (setq lsp-keymap-prefix \"C-c l\")\12    :config\12    (lsp-enable-which-key-integration t)\12    (setq lsp-completion-provider :none))\12\12  (add-hook 'c-mode-hook #'lsp-deferred)\12  (add-hook 'c++-mode-hook #'lsp-deferred)\12\12  (defun my/setup-c-c++-completion ()\12    (setq-local completion-at-point-functions\12                (list (cape-capf-super\12                       #'lsp-completion-at-point\12                       #'cape-dabbrev\12                       #'cape-file))))\12\12  (add-hook 'c-mode-hook #'my/setup-c-c++-completion)\12  (add-hook 'c++-mode-hook #'my/setup-c-c++-completion)\12")) -1] #83# -1] [[[[[nil nil #87=(section (:standard-properties [11812 11812 11812 12889 12889 0 nil section element t nil 11812 12889 nil nil nil nil #85#])) 0] [nil nil #86# 0] (src-block (:standard-properties [11812 11812 nil nil 12889 0 nil planning element t nil nil nil nil nil nil nil #87#] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package corfu\12    :ensure t\12    ;; Optional customizations\12    :custom\12    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'\12    (corfu-auto t)\12    (corfu-auto-prefix 2)\12    (corfu-auto-delay 0.0)\12    (corfu-quit-at-boundary 'separator)\12    (corfu-echo-documentation 0.25)\12    (corfu-preview-current 'insert)\12    (corfu-preselect-first nil)\12\12    :bind (:map corfu-map\12    \11      (\"M-SPC\" . corfu-insert-separator)\12    \11      (\"RET\" . corfu-insert)\12    \11      (\"TAB\" . corfu-next)\12    \11      (\"S-TAB\" . corfu-previous)\12    \11      ([tab] . corfu-next)\12    \11      ([backtab] . corfu-previous)\12    \11      (\"S-<return>\" . corfu-insert))\12    \12    :init\12    (global-corfu-mode)\12\12    (corfu-history-mode)\12    :config\12    (add-hook 'eshell-mode-hook\12    \11    (lambda () (setq-local corfu-quit-at-boundary t\12    \11\11\11\11   corfu-quit-no-match t\12    \11\11\11\11   corfu-auto nil)\12                (corfu-mode))))\12\12  ;; Enable auto completion and configure quitting\12  (setq corfu-auto t\12        corfu-quit-no-match 'separator) ;; or t\12\12")) 0] [nil nil (src-block (:standard-properties [12898 12898 nil nil 13444 0 nil planning element t nil nil nil nil nil nil nil #88=(section (:standard-properties [12898 12898 12898 13444 13444 0 nil section element t nil 12898 13444 nil nil nil nil #86#]))] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package cape\12    :ensure t\12    :bind (\"C-c p\" . cape-prefix-map) ;; Alternative key: M-<tab>, M-p, M-+\12    ;; Alternatively bind Cape commands individually.\12    ;; :bind ((\"C-c p d\" . cape-dabbrev)\12    ;;        (\"C-c p h\" . cape-history)\12    ;;        (\"C-c p f\" . cape-file)\12    ;;        ...)\12    :init\12    (add-hook 'completion-at-point-functions #'cape-dabbrev)\12    (add-hook 'completion-at-point-functions #'cape-file)\12    (add-hook 'completion-at-point-functions #'cape-elisp-block)\12    ;; ...\12  )\12\12")) 0] #88# -1] [[[nil nil #91=(section (:standard-properties [13458 13458 13458 13832 13832 0 nil section element t nil 13458 13832 nil nil nil nil #89#])) 0] [nil nil #90# 0] (src-block (:standard-properties [13458 13458 nil nil 13832 0 nil planning element t nil nil nil nil nil nil nil #91#] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package orderless\12    :ensure t\12    :custom\12    (completion-styles '(orderless basic))\12    (completion-category-overrides '((file (styles partial-completion))))\12    (completion-category-defaults nil) ;; Disable defaults, use our settings\12    (completion-pcm-leading-wildcard t)) ;; Emacs 31: partial-completion behaves like substring\12")) 0] [[nil nil (src-block (:standard-properties [13844 13844 nil nil 14386 0 nil planning element t nil nil nil nil nil nil nil #93=(section (:standard-properties [13844 13844 13844 14386 14386 0 nil section element t nil 13844 14386 nil nil nil nil #90#]))] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; Enable Vertico.\12  (use-package vertico\12    :ensure t\12    :custom\12    (vertico-scroll-margin 0) ;; Different scroll margin\12    (vertico-count 20) ;; Show more candidates\12    (vertico-resize t) ;; Grow and shrink the Vertico minibuffer\12    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'\12    :init\12    (vertico-mode))\12\12  ;; Persist history over Emacs restarts. Vertico sorts by history position.\12  (use-package savehist\12    :init\12    (savehist-mode))\12\12  ;; Emacs minibuffer configurations.\12")) 0] nil #92# -1] #93# 0] #89# 0] [[[[nil nil (src-block (:standard-properties [14400 14400 nil nil 14510 0 nil planning element t nil nil nil nil nil nil nil #100=(section (:standard-properties [14400 14400 14400 14510 14510 0 nil section element t nil 14400 14510 nil nil nil nil #92#]))] :language #61# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package projectile\12    :ensure t\12    :config\12    (projectile-mode 1))\12")) 0] [nil nil #96=(section (:standard-properties [14533 14533 14533 14973 14973 0 nil section element t nil 14533 14973 nil nil nil nil #94#])) 0] #94# 0] [[nil nil #22# 0] [nil nil #99=(section (:standard-properties [14989 14989 14989 15151 15151 0 nil section element t nil 14989 15151 nil nil nil nil #95#])) 0] #95# 0] (src-block (:standard-properties [14533 14533 nil nil 14973 1 nil planning element t nil nil nil nil nil nil nil #96#] :language #61# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package emacs\12    :custom\12    (context-menu-mode t)\12    (enable-recursive-minibuffers t)\12    (read-extended-command-predicate #'command-completion-default-include-p)\12\12    (tab-always-indent 'complete)\12    (text-mode-ispell-word-completion nil)\12    ;; Do not allow the cursor in the minibuffer prompt\12    (minibuffer-prompt-properties\12     '(read-only t cursor-intangible t face minibuffer-prompt)))\12")) 0] [[nil nil #97# 0] [nil [nil nil (src-block (:standard-properties [15353 15353 nil nil 15732 0 nil nil element t nil nil nil nil nil nil nil #98=(section (:standard-properties [15167 15167 15167 15732 15732 0 nil section element t nil 15167 15732 nil nil nil nil #97#] :fragile-cache nil))] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (add-hook 'vterm-mode-hook (lambda () (display-line-numbers-mode -1)))\12  (dolist (mode '(org-mode-hook\12                  term-mode-hook\12                  vterm-mode-hook\12                  shell-mode-hook\12                  treemacs-mode-hook\12                  eshell-mode-hook))\12    (add-hook mode (lambda() (display-line-numbers-mode -1))))\12")) 0] (src-block (:standard-properties [15167 15167 nil nil 15353 1 nil planning element t nil nil nil nil nil nil nil #98#] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package vterm-toggle\12    :after vterm\12    :ensure t\12    :config\12    (setq vterm-toggle-fullscreen-p nil)\12    (setq vterm-toggle-scope 'project))\12")) 1] #98# 1] (src-block (:standard-properties [14989 14989 nil nil 15151 0 nil planning element t nil nil nil nil nil nil nil #99#] :language #47# :switches nil :parameters nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package vterm\12    :ensure t)\12  (setq shell-file-name \"/run/current-system/sw/bin/fish\"\12        vterm-max-scrollback 5000)\12")) 0] #100# 0] #85# 1] #20# 1] #71# -1] nil nil 0] org-element--cache-compare)) ((version "2.3")))